[
    {
        "id": "1e66e83b.d85cc8",
        "type": "tab",
        "label": "SMS Notifications",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8f7b97ff.1a9968",
        "type": "http in",
        "z": "1e66e83b.d85cc8",
        "name": "",
        "url": "/events",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "f08e6c23.8afde",
                "963e70a3.c5cb5",
                "a29ce0a6.87d5"
            ]
        ]
    },
    {
        "id": "f08e6c23.8afde",
        "type": "http response",
        "z": "1e66e83b.d85cc8",
        "name": "Event Received OK",
        "statusCode": "200",
        "headers": {},
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "85e683f4.a0a95",
        "type": "debug",
        "z": "1e66e83b.d85cc8",
        "name": "Notify enabled",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 580,
        "y": 420,
        "wires": []
    },
    {
        "id": "4276946e.fa0bbc",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Switch on type",
        "property": "payload.event.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "touch",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "temperature",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "objectPresent",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1107,
        "y": 360,
        "wires": [
            [
                "cbeef63f.8102e8"
            ],
            [
                "112d9d64.8d43d3"
            ],
            [
                "c3959b3c.c6d158"
            ]
        ]
    },
    {
        "id": "963e70a3.c5cb5",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Notifications Enabled",
        "property": "payload.labels.Notify",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 140,
        "y": 360,
        "wires": [
            [
                "85e683f4.a0a95",
                "764493e1.2ec4ac"
            ]
        ]
    },
    {
        "id": "cbeef63f.8102e8",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "If TouchTrigger",
        "property": "payload.labels.TouchTrigger",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1327,
        "y": 300,
        "wires": [
            [
                "2afe5245.df783e"
            ]
        ]
    },
    {
        "id": "c3959b3c.c6d158",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Trigger same as Event",
        "property": "payload.labels.ObjectPresentTrigger",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "BOTH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "payload.event.data.objectPresent.state",
                "vt": "msg"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1347,
        "y": 420,
        "wires": [
            [
                "28b47a34.e6a4a6"
            ],
            [
                "2afe5245.df783e"
            ]
        ]
    },
    {
        "id": "2afe5245.df783e",
        "type": "link out",
        "z": "1e66e83b.d85cc8",
        "name": "Send Notification",
        "links": [
            "eab34e07.c7343"
        ],
        "x": 1962,
        "y": 400,
        "wires": []
    },
    {
        "id": "eab34e07.c7343",
        "type": "link in",
        "z": "1e66e83b.d85cc8",
        "name": "Send Notification",
        "links": [
            "2afe5245.df783e"
        ],
        "x": 75,
        "y": 720,
        "wires": [
            [
                "9b571c1c.24a7a",
                "9f298abf.2ac438",
                "aa38d399.aee3"
            ]
        ]
    },
    {
        "id": "9f298abf.2ac438",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Has \"Phone\" label",
        "property": "payload.labels.Phone",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 720,
        "wires": [
            [
                "7834b3f4.0319fc"
            ]
        ]
    },
    {
        "id": "1ea0ded7.55a021",
        "type": "twilio out",
        "z": "1e66e83b.d85cc8",
        "service": "_ext_",
        "twilio": "",
        "from": "",
        "number": "",
        "name": "Send SMS",
        "x": 830,
        "y": 700,
        "wires": []
    },
    {
        "id": "7834b3f4.0319fc",
        "type": "function",
        "z": "1e66e83b.d85cc8",
        "name": "Create SMS(es) from phone number(s)",
        "func": "var phone = msg.payload.labels.Phone.split(',')\nvar smses = []\n\n/* Create one SMS for each phone number */\nfor (var i = 0; i < phone.length; i++) {\n    var sms = {\n        topic: phone[i],\n        payload: msg.message\n    }\n    smses.push(sms)\n}\n\nnode.warn(smses)\n\nreturn [ smses ]",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 720,
        "wires": [
            [
                "1ea0ded7.55a021",
                "7915ee77.f27ba"
            ]
        ]
    },
    {
        "id": "aa38d399.aee3",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Has \"Email\" label",
        "property": "payload.labels.Email",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 230,
        "y": 820,
        "wires": [
            [
                "341448b8.2e7578"
            ]
        ]
    },
    {
        "id": "c59de82f.5e24e8",
        "type": "e-mail",
        "z": "1e66e83b.d85cc8",
        "server": "smtp.sparkpostmail.com",
        "port": "2525",
        "secure": false,
        "name": "",
        "dname": "",
        "x": 810,
        "y": 800,
        "wires": []
    },
    {
        "id": "341448b8.2e7578",
        "type": "function",
        "z": "1e66e83b.d85cc8",
        "name": "Set Subject and Convert Format",
        "func": "var emailSubject = msg.payload.labels.EmailSubject\nif (!emailSubject) {\n    emailSubject = \"Sensor Notification\"\n}\n\nmsg.from = \"notifications@demo.d21s.com\"\nmsg.to = msg.payload.labels.Email\nmsg.topic = emailSubject\nmsg.payload = msg.message\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 820,
        "wires": [
            [
                "c59de82f.5e24e8",
                "d9f71bc0.a00058"
            ]
        ]
    },
    {
        "id": "a29ce0a6.87d5",
        "type": "debug",
        "z": "1e66e83b.d85cc8",
        "name": "Raw /events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 550,
        "y": 100,
        "wires": []
    },
    {
        "id": "9b571c1c.24a7a",
        "type": "debug",
        "z": "1e66e83b.d85cc8",
        "name": "Send Notification",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "message",
        "x": 230,
        "y": 660,
        "wires": []
    },
    {
        "id": "d9f71bc0.a00058",
        "type": "debug",
        "z": "1e66e83b.d85cc8",
        "name": "Send Email",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 830,
        "y": 840,
        "wires": []
    },
    {
        "id": "7915ee77.f27ba",
        "type": "debug",
        "z": "1e66e83b.d85cc8",
        "name": "Send SMS",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 830,
        "y": 740,
        "wires": []
    },
    {
        "id": "112d9d64.8d43d3",
        "type": "function",
        "z": "1e66e83b.d85cc8",
        "name": "Temperature Trigger Filter",
        "func": "var trigger = false\nvar temperature = msg.payload.event.data.temperature.value\nvar maxTempTrigger = msg.payload.labels.MaxTempTrigger\nvar minTempTrigger = msg.payload.labels.MinTempTrigger\nvar altMessage = msg.payload.labels.AltMessage\n\nif(maxTempTrigger && temperature >= maxTempTrigger) {\n    trigger = true\n}\nif(minTempTrigger && temperature <= minTempTrigger) {\n    trigger = true\n    if(altMessage) {\n        msg.message = altMessage;\n    }\n}\n\n// We keep a cache of active triggers in the global context\nvar activeTriggers=global.get(\"activeTriggers\")\nif(!activeTriggers) {\n activeTriggers=new Map();\n global.set(\"activeTriggers\",activeTriggers);\n}\n\nactive = activeTriggers.get(msg.payload.event.targetName)\nif(active != trigger) {\n    activeTriggers.set(msg.payload.event.targetName, trigger)\n    if(trigger) {\n        return msg\n    }\n}\nreturn null\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1357,
        "y": 360,
        "wires": [
            [
                "2afe5245.df783e"
            ]
        ]
    },
    {
        "id": "934347f7.62bea8",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Has \"Message\" label",
        "property": "payload.labels.Message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 674,
        "y": 360,
        "wires": [
            [
                "c02f6a84.c3b298"
            ]
        ]
    },
    {
        "id": "c02f6a84.c3b298",
        "type": "change",
        "z": "1e66e83b.d85cc8",
        "name": "Set default Message",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "msg",
                "to": "payload.labels.Message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 907,
        "y": 360,
        "wires": [
            [
                "4276946e.fa0bbc"
            ]
        ]
    },
    {
        "id": "f29ca543.eea6b8",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Has \"AltMessage\" label",
        "property": "payload.labels.AltMessage",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1597,
        "y": 520,
        "wires": [
            [
                "2afe5245.df783e"
            ],
            [
                "ee3d2a68.3cf2d8"
            ]
        ]
    },
    {
        "id": "28b47a34.e6a4a6",
        "type": "switch",
        "z": "1e66e83b.d85cc8",
        "name": "Switch on state",
        "property": "payload.event.data.objectPresent.state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRESENT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NOT_PRESENT",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1567,
        "y": 460,
        "wires": [
            [
                "2afe5245.df783e"
            ],
            [
                "f29ca543.eea6b8",
                "db5e67ba.c64438"
            ]
        ]
    },
    {
        "id": "ee3d2a68.3cf2d8",
        "type": "change",
        "z": "1e66e83b.d85cc8",
        "name": "Set AltMessage",
        "rules": [
            {
                "t": "set",
                "p": "message",
                "pt": "msg",
                "to": "payload.labels.AltMessage",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1567,
        "y": 580,
        "wires": [
            [
                "2afe5245.df783e"
            ]
        ]
    },
    {
        "id": "712e591f.6cadd8",
        "type": "comment",
        "z": "1e66e83b.d85cc8",
        "name": "Use AltMessage for NOT_PRESENT if ObjectPresentTrigger is set to BOTH",
        "info": "",
        "x": 1567,
        "y": 640,
        "wires": []
    },
    {
        "id": "db5e67ba.c64438",
        "type": "debug",
        "z": "1e66e83b.d85cc8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1987,
        "y": 560,
        "wires": []
    },
    {
        "id": "764493e1.2ec4ac",
        "type": "function",
        "z": "1e66e83b.d85cc8",
        "name": "Filter on ActiveDayTimes",
        "func": "var activeDayTimes = msg.payload.labels.ActiveDayTimes\n\n/* If no ActiveDayTimes label - pass through */\nif (!activeDayTimes) {\n    return msg;\n}\n\n/* Else, check ActiveDayTimes */\nvar currentDay = new Date().toLocaleDateString('en-us', { weekday: 'long' }).toLowerCase(); \nvar currentHour = new Date().getHours();\nvar currentMinute = new Date().getMinutes();\n\n/* Go through all day-times */\nactiveDayTimes = activeDayTimes.split(',');\nfor(var i = 0; i < activeDayTimes.length; i++) {\n    var activeDayTime = activeDayTimes[i].trim();\n    activeDayTime = activeDayTime.split(' ');\n\n    /* Filter on active day */\n    var activeDay = activeDayTime[0].toLowerCase();\n    if(activeDay != currentDay) {\n        continue;\n    }\n    \n    /* Filter on time - if given */\n    if(activeDayTime.length > 1) {\n        var activeTimeSpan = activeDayTime[1].split('-');\n        \n        /* Basic error handling - skip invalid */\n        if(activeTimeSpan.length != 2) {\n            continue;\n        }\n        \n        var minHour = parseInt(activeTimeSpan[0].split(':')[0], 10);\n        var minMinute = parseInt(activeTimeSpan[0].split(':')[1], 10);\n        var maxHour = parseInt(activeTimeSpan[1].split(':')[0], 10);\n        var maxMinute = parseInt(activeTimeSpan[1].split(':')[1], 10);\n        \n        if ((currentHour >= minHour) &&\n            (currentHour <= maxHour) &&\n            (currentMinute >= minMinute) &&\n            (currentMinute <= maxMinute)) {\n            return msg;\n        } \n    } else {\n        /* Else pass through */\n        return msg;\n    }\n}\n\n/* If ActiveDayTimes is configured - fefault is to not pass through */\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 412,
        "y": 360,
        "wires": [
            [
                "934347f7.62bea8",
                "55fd52c2.bd2f1c"
            ]
        ]
    },
    {
        "id": "55fd52c2.bd2f1c",
        "type": "debug",
        "z": "1e66e83b.d85cc8",
        "name": "Passed ActiveDayTimes filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 700,
        "y": 300,
        "wires": []
    }
]